# This file explains how round() function works with a negative 'ndigits' parameter.

>>> round(1.5, -0)
2.0
>>> round(1.5, -1)
0.0
>>> round(1.51, -1)
0.0
>>> round(1.59, -1)
0.0
>>> round(21.82533, -2)
0.0
>>> round(30, 2)
30
>>> # Why round(30, 2) returns an integer of 30? Because the definition of round(number[, ndigits]) tells us that, if 'ndigits'
is omitted or is None, it returns an integer. If 'ndigits' is NOT omitted or is NOT None (meaning we pass in some value as the 
'ndigits' parameter), it returns the same type as the 'number'. In this case, we've passed in an integer of 30 as the 'number'
parameter, so it must return a number rounded that is the same type as 30 .
... 
>>> round(21.82533, -2)                                                    0.0
>>> # since the definition of the round() function tells us that, if the 'ndigits' parameter is not omitted/None, the return 
value has the same type as 'number'. In this case, the 'number' parameter is 21.82533, which is a float data-type, so the 
return value should have the same type as it, which is float. That's why it returns 0.0, rather than 0 .
... 
>>> round(99.99999, -2)
100.0
>>> # By the definition, if 'ndigits' is not omitted/None, it returns the closest multiple of 10 to the power of minus 
'ndigits'. In this case, 10 to the power of minus 'ndigits' is 10^(-(-2)) = 10^2 = 100 . Then, we can calculate several 
multiples of 100 that are close to the given 'number' of 99.99999. Looking at the real number line, we can see that near
the number 99.99999 we have -200(=-2*100), -100(=-1*100), 0(=0*100), 100(=1*100), and 200(=2*100), which are all multiples 
of 100 since they are all divisible by 100 or they are all the products of one integer and 100 . Obviously, among those 
multiples, the one that is closest to 99.99999 is 100 .

