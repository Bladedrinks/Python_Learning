About mathematical definition about 'set operations', see:
https://www.probabilitycourse.com/chapter1/1_2_2_set_operations.php

# Union of, say, sets A and B is a set where each element is either in A or in B (possibly both).
# Unlike math which has only one way of denoting the 'union' operation - A U B, Python has two ways of denoting it: 
# one is referring to the punctuation mark, |, read 'vertical bar', and the other is using the set.union(other) method.
>>> A = {'a', 'b', 'c'}
>>> B = {'c', 'y', 'z'}
>>> union_of_A_and_B = A | B
>>> union_of_A_and_B
{'z', 'b', 'c', 'a', 'y'}
>>> 
>>> union_of_A_and_B = A.union(B)
>>> union_of_A_and_B
{'z', 'b', 'c', 'a', 'y'}
>>> 
>>> A = {1, 2, 3}
>>> B = {2, 3, 4, 5}
>>> union = A.union(B)
>>> union
{1, 2, 3, 4, 5}

>>> # Notice that we can pass in more than one set as the parameter while using the .union() method. You can check out the official Python documentation on .union() method, which says very clearly: set.union(*other) where the * (asterisk) sign tells us that you can pass in as many arguments as you want.
... 
>>> A1 = set(chr(97+i) for i in range(5))
>>> A1
{'b', 'e', 'c', 'a', 'd'}
>>> A2 = set(chr(102+i) for i in range(5))
>>> A2
{'h', 'i', 'j', 'f', 'g'}
>>> A3 = set(chr(107+i) for i in range(5))
>>> A3
{'l', 'k', 'o', 'm', 'n'}
>>> A4 = set(chr(112+i) for i in range(5))
>>> A4
{'q', 't', 's', 'r', 'p'}
>>> A5 = set(chr(117+i) for i in range(5))
>>> A5
{'x', 'v', 'y', 'w', 'u'}
>>> # To compute the union of sets A1, A2, A3, A4 and A5, we call set.union(*others) on those sets.
... union_of_As = A1.union(A2, A3, A4, A5)
>>> union_of_As
{'q', 's', 'x', 'h', 'k', 'm', 'v', 'y', 'r', 'c', 'p', 'b', 'f', 'n', 'g', 't', 'l', 'o', 'i', 'j', 'w', 'e', 'u', 'a', 'd'}

>>> # Intersection of sets A and B is a set where each element is both in A and B.
>>> # There are two ways of computing the intersection of two or more sets: (a) & (ampersand) and (b) set.intersection(*others) 
... A1 = {1, 2, 3, 4}
>>> A2 = {3, 4, 5, 6}
>>> A3 = {5, 6, 7, 8}
>>> A1 & A2
{3, 4}
>>> A2 & A3
{5, 6}
>>> A1 & A2 & A3
set()
>>> intersection_set = A1 & A2 & A3
>>> intersection_set
set()
>>> A4 = {3, 4, 9, 10}
>>> A1 & A2 & A4
{3, 4}
>>> 
>>> A1.intersection(A2, A3)
set()
>>> A1.intersection(A2, A4)
{3, 4}

# Interestingly, there's no handy tool(s) to compute the complement of a set in Python. So we need to create a
# user-defined function to accomplish this set operation programmatically.
def complement_v1(universal_set, set_A):
    """
    Return the complement of a set A, denoted mathematically by Ac or A¯,
    which contains all elements that are in the universal set S BUT not in set A.
    """
    complement_set = set()
    for elem in universal_set:
        if elem not in set_A:
            complement_set.add(elem)
    return complement_set


def complement_v2(universal_set, set_A):
    """
    Return the complement of a set A, denoted mathematically by Ac or A¯,
    which contains all elements that are in the universal set S BUT not in set A.
    """
    return set(elem for elem in universal_set if elem not in set_A)


# ====== UDF Test ======
set_S = {'a', 'b', 'c', 'd'}
set_A = {'a', 'c'}
print(complement_v2(set_S, set_A))
>>> var = {}
>>> type(var)
<class 'dict'>
>>> var = set()
>>> type(var)
<class 'set'>
>>> # Warning: Curly braces or the set() function can be used to create sets. 
>>> # To create an empty set you have to use set(), not {}; the latter creates an empty dictionary.


>>> # The difference of sets A and B is computed by using the '-' (minus) sign or by referring to the set.difference(*others) method.
... A = {1, 2, 3}
>>> B = {3, 4, 5}
>>> difference = A - B
>>> difference
{1, 2}
>>> # The difference of A - B is a set contains all elements that are in A but not in B.
... C = {2, 5, 6}
>>> new_diff = A - B - C
>>> new_diff
{1}
>>> diff = A.difference(B)
>>> diff
{1, 2}
>>> another_diff = B.difference(C)
>>> another_diff
{3, 4}
>>> new_diff = A.difference(B, C)
>>> new_diff
{1}
